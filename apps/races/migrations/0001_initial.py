# Generated by Django 4.1.6 on 2023-02-12 17:50

import django.contrib.postgres.fields
import django.utils.timezone
from django.db import migrations, models

import apps.schemas
import djutils.validators.schema


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("entities", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Flag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creation_date", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("name", models.CharField(max_length=150, unique=True)),
                (
                    "tokens",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50), blank=True, default=list, editable=False, size=None
                    ),
                ),
                ("verified", models.BooleanField(blank=True, default=False)),
            ],
            options={
                "verbose_name": "Bandera",
                "verbose_name_plural": "Banderas",
                "db_table": "flag",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Trophy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creation_date", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("name", models.CharField(max_length=150, unique=True)),
                (
                    "tokens",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50), blank=True, default=list, editable=False, size=None
                    ),
                ),
                ("verified", models.BooleanField(blank=True, default=False)),
            ],
            options={
                "verbose_name": "Trofeo",
                "verbose_name_plural": "Trofeos",
                "db_table": "trophy",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Race",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("creation_date", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("laps", models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ("lanes", models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ("town", models.CharField(blank=True, default=None, max_length=100, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("CONVENTIONAL", "Convencional"), ("TIME_TRIAL", "Contrarreloj")],
                        default="CONVENTIONAL",
                        max_length=50,
                    ),
                ),
                ("date", models.DateField()),
                ("day", models.PositiveSmallIntegerField(default=1)),
                ("cancelled", models.BooleanField(default=False)),
                (
                    "cancellation_reasons",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200), blank=True, default=list, size=None
                    ),
                ),
                ("race_name", models.CharField(blank=True, default=None, max_length=200, null=True)),
                ("sponsor", models.CharField(blank=True, default=None, max_length=200, null=True)),
                ("trophy_edition", models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ("flag_edition", models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                (
                    "modality",
                    models.CharField(
                        choices=[("TRAINERA", "Trainera"), ("TRAINERILLA", "Trainerilla"), ("BATEL", "Batel")],
                        default="TRAINERA",
                        max_length=15,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=apps.schemas.default_metadata,
                        validators=[
                            djutils.validators.schema.JSONSchemaValidator(
                                schema={
                                    "$schema": "http://json-schema.org/schema#",
                                    "name": "RaceMetadata",
                                    "properties": {
                                        "datasource": {
                                            "items": {
                                                "properties": {
                                                    "datasource_name": {"type": "string"},
                                                    "race_id": {"type": "string"},
                                                    "values": {
                                                        "items": {
                                                            "properties": {
                                                                "key": {"type": "string"},
                                                                "value": {"type": "string"},
                                                            },
                                                            "required": ["key", "value"],
                                                            "type": "object",
                                                        },
                                                        "type": "array",
                                                    },
                                                },
                                                "required": ["race_id", "datasource_name"],
                                                "type": "object",
                                            },
                                            "type": "array",
                                        }
                                    },
                                    "required": ["datasource"],
                                }
                            )
                        ],
                    ),
                ),
                (
                    "flag",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="editions",
                        related_query_name="edition",
                        to="races.flag",
                    ),
                ),
                (
                    "league",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="races",
                        related_query_name="race",
                        to="entities.league",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="entities.entity",
                    ),
                ),
                (
                    "trophy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="editions",
                        related_query_name="edition",
                        to="races.trophy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Regata",
                "db_table": "race",
                "ordering": ["date", "league"],
                "unique_together": {
                    ("league", "date"),
                    ("flag", "league", "flag_edition", "modality", "day"),
                    ("trophy", "league", "trophy_edition", "modality", "day"),
                },
            },
        ),
    ]
