# Generated by Django 5.1.1 on 2024-10-30 12:34

from itertools import groupby
from operator import attrgetter

from django.db import migrations, models
from django.db.models.aggregates import Count
from django.db.models.expressions import F, OuterRef, Subquery
from django.db.models.query_utils import Q

import apps.schemas
import djutils.validators.schema
from rscraping.data.checks import is_branch_club


def update_branch_clubs(apps, _):
    Race = apps.get_model("races", "Race")
    Participant = apps.get_model("participants", "Participant")

    # filter races with repeated participants
    races = Race.objects.annotate(
        distinct_club_count=Subquery(
            Participant.objects.filter(race_id=OuterRef("id"))
            .values("race_id")
            .annotate(distinct_count=Count("club_id", distinct=True))
            .values("distinct_count")
        ),
        total_participant_count=Subquery(
            Participant.objects.filter(race_id=OuterRef("id"))
            .values("race_id")
            .annotate(total_count=Count("id"))
            .values("total_count")
        ),
    ).filter(~Q(distinct_club_count=F("total_participant_count")))

    num_races = races.count()
    for idx, race in enumerate(races):
        print(f"{idx + 1}/{num_races} updating {race.pk}")
        grouped_participants = groupby(
            Participant.objects.filter(race=race).select_related("club").order_by("club_id", "gender", "category"),
            key=attrgetter("club_id", "gender", "category"),
        )
        for _, participants in grouped_participants:
            participants = list(participants)
            if len(participants) > 1:
                for participant in participants:
                    is_b_team = any(is_branch_club(name) for name in participant.club_names)
                    if is_b_team:
                        participant.branch = "B"
                        print(f"updating {participant.pk}::{participant.club.name} to B")
                        participant.save()
                    is_c_team = any(is_branch_club(name, "C") for name in participant.club_names)
                    if is_c_team:
                        participant.branch = "C"
                        print(f"updating {participant.pk}::{participant.club.name} to C")
                        participant.save()


class Migration(migrations.Migration):
    dependencies = [
        ("participants", "0009_penalty_notes"),
    ]

    operations = [
        migrations.AddField(
            model_name="participant",
            name="branch",
            field=models.CharField(blank=True, default=None, max_length=1, null=True),
        ),
        migrations.RunPython(update_branch_clubs, reverse_code=migrations.RunPython.noop),
        migrations.AddField(
            model_name="participant",
            name="metadata",
            field=models.JSONField(
                default=apps.schemas.default_metadata,
                validators=[
                    djutils.validators.schema.JSONSchemaValidator(
                        schema={
                            "$schema": "http://json-schema.org/schema#",
                            "name": "ParticipantMetadata",
                            "properties": {
                                "datasource": {
                                    "items": {
                                        "additionalProperties": False,
                                        "properties": {
                                            "data": {"type": "object"},
                                            "datasource_name": {"type": "string"},
                                            "date": {"type": "string"},
                                        },
                                        "required": ["datasource_name"],
                                        "type": "object",
                                    },
                                    "type": "array",
                                }
                            },
                            "required": ["datasource"],
                        }
                    )
                ],
            ),
        ),
    ]
